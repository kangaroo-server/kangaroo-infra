---
- name: Find the most recent ubuntu AMI
  ec2_ami_find:
    name: "ubuntu/images/hvm-ssd/ubuntu-artful-17.10-amd64*"
    owner: 099720109477
    region: "{{region}}"
    architecture: x86_64
    virtualization_type: hvm
    sort: creationDate
    sort_order: descending
    sort_end: 1
  register: ami_find

- name: Is there a running ec2 instance?
  ec2_remote_facts:
    region: "{{region}}"
    filters:
      instance-state-name: running
      "tag:Name": "{{ami_tag}}"
  register: running_instances

- name: Launch a test instance if we need one.
  ec2:
    region: "{{region}}"
    keypair: ansible
    instance_type: "{{instance_type}}"
    image: "{{ ami_find.results[0].ami_id }}"
    wait: yes
    count: 1
    instance_tags:
       Name: "{{ami_tag}}"
    vpc_subnet_id: "{{subnet}}"
    assign_public_ip: yes
    volumes:
      - device_name: /dev/sda1
        device_type: gp2
        volume_size: 8
        delete_on_termination: true
  when: running_instances.instances | length == 0
  register: created_instances

- name: Build a list of instance id's.
  set_fact:
     instance_ids: "{{created_instances.instances | default([]) | map(attribute='id') | list }} + {{running_instances.instances | default([]) | map(attribute='id') | list}}"

- name: Build a list of public IP's
  set_fact:
     ip_addresses: "{{created_instances.instances | default([]) | map(attribute='public_ip') | list }} + {{running_instances.instances | default([]) | map(attribute='public_ip_address') | list}}"

- name: Wait 300 seconds for port 22 to open on our hosts
  wait_for:
    host: "{{item}}"
    port: 22
  with_items: "{{ip_addresses}}"

- name: Accept new ssh fingerprints
  known_hosts:
    name: "{{item}}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t ecdsa ' + item) }}"
    state: present
  with_items: "{{ip_addresses}}"

- include: install.yml
  remote_user: ubuntu
  become: true
  delegate_to: "{{outer_item}}"
  with_items: "{{ip_addresses}}"
  loop_control:
    loop_var: outer_item

- name: Build the AMI
  ec2_ami:
    region: "{{region}}"
    instance_id: "{{instance_ids[0]}}"
    wait: yes
    name: "{{ami_name}}"
    tags:
      Name: "{{ami_tag}}"
    device_mapping:
      - device_name: /dev/sda1
        volume_type: gp2
        size: 8
        delete_on_termination: true
      - device_name: /dev/sdb
        volume_type: gp2
        size: 8
        delete_on_termination: true
  register: new_ami

- debug:
    var: new_ami

- name: Clear old ssh fingerprints
  known_hosts:
    name: "{{item}}"
    state: absent
  with_items: "{{ip_addresses}}"

- name: Terminate instances that were previously launched
  ec2:
    region: "{{region}}"
    state: 'absent'
    instance_ids: "{{instance_ids}}"
